#!/usr/bin/env python3
"""
IBVS Convergence Analysis Script

This script reads the CSV log file generated by the IBVS controller and creates
comprehensive plots for analyzing convergence behavior.

Usage:
    python3 analyze_ibvs_log.py /tmp/ibvs_log.csv
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import sys
from pathlib import Path

def load_log_file(file_path):
    try:
        df = pd.read_csv(file_path)
        print(f"Successfully loaded {len(df)} samples from {file_path}")
        print(f"Time span: {df['timestamp'].min():.2f}s to {df['timestamp'].max():.2f}s")
        return df
    except Exception as e:
        print(f"Error loading file: {e}")
        sys.exit(1)

def plot_feature_error(df, ax):
    """Plot feature error over time."""
    ax.plot(df['timestamp'], df['error_u'], label='Error u', linewidth=1.5)
    ax.plot(df['timestamp'], df['error_v'], label='Error v', linewidth=1.5)
    ax.plot(df['timestamp'], df['error_norm'], label='Error norm', 
            linewidth=2, linestyle='--', color='black')
    ax.axhline(y=0, color='gray', linestyle=':', alpha=0.5)
    ax.set_xlabel('Time (s)')
    ax.set_ylabel('Feature Error (normalized pixels)')
    ax.set_title('Feature Error Convergence')
    ax.legend()
    ax.grid(True, alpha=0.3)

def plot_ball_position(df, ax):
    """Plot ball position in image coordinates."""
    detected = df[df['ball_detected'] == 1]
    ax.plot(detected['timestamp'], detected['ball_u'], label='u (pixels)', linewidth=1.5)
    ax.plot(detected['timestamp'], detected['ball_v'], label='v (pixels)', linewidth=1.5)
    ax.axhline(y=320, color='red', linestyle='--', alpha=0.5, label='Center u (320)')
    ax.axhline(y=240, color='blue', linestyle='--', alpha=0.5, label='Center v (240)')
    ax.set_xlabel('Time (s)')
    ax.set_ylabel('Image Coordinates (pixels)')
    ax.set_title('Ball Position in Image')
    ax.legend()
    ax.grid(True, alpha=0.3)

def plot_control_velocities(df, ax):
    """Plot control velocities."""
    ax.plot(df['timestamp'], df['vx'], label='vx', linewidth=1.5)
    ax.plot(df['timestamp'], df['vy'], label='vy', linewidth=1.5)
    ax.plot(df['timestamp'], df['vz'], label='vz', linewidth=1.5)
    ax.axhline(y=0, color='gray', linestyle=':', alpha=0.5)
    ax.set_xlabel('Time (s)')
    ax.set_ylabel('Linear Velocity (m/s)')
    ax.set_title('Linear Velocities')
    ax.legend()
    ax.grid(True, alpha=0.3)

def plot_angular_velocities(df, ax):
    """Plot angular velocities."""
    ax.plot(df['timestamp'], df['wx'], label='ωx', linewidth=1.5)
    ax.plot(df['timestamp'], df['wy'], label='ωy', linewidth=1.5)
    ax.plot(df['timestamp'], df['wz'], label='ωz', linewidth=1.5)
    ax.axhline(y=0, color='gray', linestyle=':', alpha=0.5)
    ax.set_xlabel('Time (s)')
    ax.set_ylabel('Angular Velocity (rad/s)')
    ax.set_title('Angular Velocities')
    ax.legend()
    ax.grid(True, alpha=0.3)

def plot_velocity_norms(df, ax):
    """Plot velocity norms."""
    ax.plot(df['timestamp'], df['v_linear_norm'], label='Linear velocity norm', linewidth=2)
    ax.plot(df['timestamp'], df['v_angular_norm'], label='Angular velocity norm', linewidth=2)
    ax.set_xlabel('Time (s)')
    ax.set_ylabel('Velocity Magnitude')
    ax.set_title('Velocity Norms')
    ax.legend()
    ax.grid(True, alpha=0.3)

def plot_convergence_ratio(df, ax):
    """Plot convergence ratio (error reduction rate)."""
    # Filter out invalid values
    valid_data = df[df['convergence_ratio'].notna() & (df['convergence_ratio'] > 0)]
    ax.plot(valid_data['timestamp'], valid_data['convergence_ratio'], linewidth=1.5)
    ax.axhline(y=1.0, color='red', linestyle='--', alpha=0.5, label='No improvement')
    ax.set_xlabel('Time (s)')
    ax.set_ylabel('Convergence Ratio')
    ax.set_title('Error Convergence Ratio (< 1.0 = improving)')
    ax.legend()
    ax.grid(True, alpha=0.3)
    ax.set_ylim([0, 2])

def plot_ball_trajectory(df, ax):
    """Plot ball trajectory in image space."""
    detected = df[df['ball_detected'] == 1]
    scatter = ax.scatter(detected['ball_u'], detected['ball_v'], 
                        c=detected['timestamp'], cmap='viridis', 
                        s=10, alpha=0.6)
    ax.plot(320, 240, 'r*', markersize=20, label='Target (center)')
    ax.set_xlabel('u (pixels)')
    ax.set_ylabel('v (pixels)')
    ax.set_title('Ball Trajectory in Image Space')
    ax.set_xlim([0, 640])
    ax.set_ylim([0, 480])
    ax.invert_yaxis()  
    ax.legend()
    ax.grid(True, alpha=0.3)
    plt.colorbar(scatter, ax=ax, label='Time (s)')

def plot_detection_status(df, ax):
    """Plot ball detection status."""
    ax.fill_between(df['timestamp'], 0, df['ball_detected'], 
                     alpha=0.3, label='Ball detected')
    ax.set_xlabel('Time (s)')
    ax.set_ylabel('Detection Status')
    ax.set_title('Ball Detection Status')
    ax.set_ylim([-0.1, 1.1])
    ax.legend()
    ax.grid(True, alpha=0.3)

def calculate_statistics(df):
    """Calculate and print convergence statistics."""
    print("\n" + "="*60)
    print("CONVERGENCE STATISTICS")
    print("="*60)
    
    detected = df[df['ball_detected'] == 1]
    
    if len(detected) > 0:
        print(f"\nTotal samples: {len(df)}")
        print(f"Detected samples: {len(detected)} ({100*len(detected)/len(df):.1f}%)")
        
        print(f"\nInitial error: {detected['error_norm'].iloc[0]:.4f}")
        print(f"Final error: {detected['error_norm'].iloc[-1]:.4f}")
        print(f"Mean error: {detected['error_norm'].mean():.4f}")
        print(f"Std error: {detected['error_norm'].std():.4f}")
        
        initial_error = detected['error_norm'].iloc[0]
        threshold = 0.05 * initial_error
        settled = detected[detected['error_norm'] < threshold]
        if len(settled) > 0:
            settling_time = settled['timestamp'].iloc[0]
            print(f"\nSettling time (5% threshold): {settling_time:.2f}s")
        else:
            print(f"\nSettling time (5% threshold): Not reached")
        
        print(f"\nMax linear velocity: {detected['v_linear_norm'].max():.4f} m/s")
        print(f"Max angular velocity: {detected['v_angular_norm'].max():.4f} rad/s")
        
        print(f"\nFinal ball position: u={detected['ball_u'].iloc[-1]:.1f}, v={detected['ball_v'].iloc[-1]:.1f}")
        print(f"Target position: u=320, v=240")
        print(f"Position error: Δu={detected['ball_u'].iloc[-1]-320:.1f}, Δv={detected['ball_v'].iloc[-1]-240:.1f}")
    else:
        print("No detected samples found!")
    
    print("="*60 + "\n")

def create_comprehensive_plots(df, output_dir=None):
    """Create comprehensive analysis plots."""
    
    fig = plt.figure(figsize=(20, 10))
    
    ax1 = plt.subplot(2, 3, 1)
    plot_feature_error(df, ax1)
    
    ax2 = plt.subplot(2, 3, 2)
    plot_ball_position(df, ax2)
    
    ax3 = plt.subplot(2, 3, 3)
    plot_ball_trajectory(df, ax3)
    
    ax4 = plt.subplot(2, 3, 4)
    plot_control_velocities(df, ax4)
    
    ax5 = plt.subplot(2, 3, 5)
    plot_angular_velocities(df, ax5)
    
    ax6 = plt.subplot(2, 3, 6)
    plot_velocity_norms(df, ax6)
    
    plt.suptitle('IBVS Convergence Analysis', fontsize=16, fontweight='bold')
    plt.tight_layout()
    
    # Save if output directory specified
    if output_dir:
        output_path = Path(output_dir) / 'ibvs_analysis.png'
        plt.savefig(output_path, dpi=300, bbox_inches='tight')
        print(f"\nPlot saved to: {output_path}")
    
    plt.show()

def main():
    if len(sys.argv) < 2:
        print("Usage: python3 analyze_ibvs_log.py <log_file_path> [output_dir]")
        print("Example: python3 analyze_ibvs_log.py /tmp/ibvs_log.csv .")
        sys.exit(1)
    
    log_file_path = sys.argv[1]
    output_dir = sys.argv[2] if len(sys.argv) > 2 else None
    
    if not Path(log_file_path).exists():
        print(f"Error: File not found: {log_file_path}")
        sys.exit(1)
    
    df = load_log_file(log_file_path)
    
    calculate_statistics(df)
    
    create_comprehensive_plots(df, output_dir)

if __name__ == "__main__":
    main()
